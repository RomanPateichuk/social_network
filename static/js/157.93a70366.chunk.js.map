{"version":3,"file":"static/js/157.93a70366.chunk.js","mappings":"2JACA,QAA0B,wBAA1B,EAAiE,6BAAjE,EAAuG,uBAAvG,EAAuI,uBAAvI,EAAyK,yBAAzK,EAA4M,wB,uBCO5M,MAYA,EAZyCA,IACvC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAgB,IAAMA,EAAcC,UAClDH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAIP,EAAKK,SAAEN,EAAMS,QACtB,ECGV,EAVsCT,IAElCG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAeC,SAC5BN,EAAMU,U,mDCCb,MAAMC,GAAcC,EAAAA,EAAAA,GAAiB,IAa/BC,GAAsBC,EAAAA,EAAAA,GAAoC,CAAEC,KAAM,wBAA5CD,EAX0Ed,IAC7FgB,EAAAA,EAAAA,MAAA,QAAMC,SAAUjB,EAAMkB,aAAaZ,SAAA,EACxCH,EAAAA,EAAAA,KAAA,OAAAG,UACGa,EAAAA,EAAAA,IAA0C,qBAAsB,iBAAkB,CAACC,EAAAA,EAAUT,GAAcU,EAAAA,OAE9GlB,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,gBA+Bd,EAxByCN,IACvC,IAAIsB,EAAoBtB,EAAMuB,YAAYC,QAAQC,KAAIC,IAAQvB,EAAAA,EAAAA,KAACwB,EAAU,CAAelB,KAAMiB,EAAKjB,KAAMP,GAAIwB,EAAKxB,IAAnCwB,EAAKxB,MAChF0B,EAAkB5B,EAAMuB,YAAYM,SAASJ,KAAIC,IAAQvB,EAAAA,EAAAA,KAAC2B,EAAO,CAAepB,QAASgB,EAAKhB,SAAvBgB,EAAKxB,MAKhF,OAAKF,EAAM+B,QAKTf,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAeC,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAoBC,SACjCgB,KAEHN,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAgBC,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,OAAAG,SAAMsB,KACNzB,EAAAA,EAAAA,KAACU,EAAmB,CAACI,SAfPe,IAClBhC,EAAMiC,YAAYD,EAAKE,eAAe,WAI/B/B,EAAAA,EAAAA,KAACgC,EAAAA,GAAQ,CAAC3B,GAAG,UAYd,E,wBC/BV,SAAe4B,E,MAAAA,KACbC,EAAAA,EAAAA,KAPqBC,IACd,CACLf,YAAae,EAAMf,eAKI,IAAKgB,EAAAA,IAC9BC,EAAAA,EAFF,CAGEC,E,6ECbF,IAAIC,EAA8BJ,IAAK,CACrCP,OAAQO,EAAMK,KAAKZ,SAGd,MAAMS,EAAoBI,IAE/B,MAAMC,UAA0BC,EAAAA,UAC9BC,MAAAA,GACE,OAAKC,KAAKhD,MAAM+B,QACT5B,EAAAA,EAAAA,KAACyC,EAAS,IAAKI,KAAKhD,SADIG,EAAAA,EAAAA,KAACgC,EAAAA,GAAQ,CAAC3B,GAAI,UAG/C,EAMF,OAHqC6B,EAAAA,EAAAA,IAAQK,EAARL,CAAoCQ,EAGpC,C","sources":["webpack://social_network/./src/components/Dialogs/Dialog.module.css?7071","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialog_dialogs__uyZqU\",\"dialogsItems\":\"Dialog_dialogsItems__Z7CI3\",\"dialog\":\"Dialog_dialog__3g+yV\",\"active\":\"Dialog_active__KMy1H\",\"messages\":\"Dialog_messages__dG+Gz\",\"message\":\"Dialog_message__ZlcIZ\"};","import styles from '../Dialog.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n  let path = \"/dialogs/\" + props.id\r\n  return (\r\n    <div className={styles.dialog + ' ' + styles.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default DialogItem","import styles from '../Dialog.module.css'\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={styles.message}>\r\n      {props.message}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Message","import styles from './Dialog.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message'\r\nimport React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { reduxForm, Field, InjectedFormProps } from 'redux-form'\r\nimport { CreateField, Textarea } from '../common/FormsControls/FormsControls'\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators'\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n  return <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n      {CreateField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody', [required, maxLength50], Textarea)}\r\n    </div>\r\n    <div>\r\n      <button>Send</button>\r\n    </div>\r\n  </form>\r\n}\r\n\r\nconst AddMessageFromRedux = reduxForm<NewMessageFormValuesType>({ form: \"dialogAddMessageForm\" })(AddMessageForm)\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n  let dialogElementsJSX = props.dialogsPage.dialogs.map(item => <DialogItem key={item.id} name={item.name} id={item.id} />)\r\n  let messagesDataJSX = props.dialogsPage.messages.map(item => <Message key={item.id} message={item.message} />)\r\n  let addNewMesage = (data: NewMessageFormValuesType) => {\r\n    props.sendMessage(data.newMessageBody)\r\n  }\r\n\r\n  if (!props.isAuth) {\r\n    return <Navigate to=\"/login\" />\r\n  }\r\n\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <div className={styles.dialogsItems}>\r\n        {dialogElementsJSX}\r\n      </div>\r\n      <div className={styles.messages}>\r\n        <div>{messagesDataJSX}</div>\r\n        <AddMessageFromRedux onSubmit={addNewMesage} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dialogs\r\n\r\n// types\r\ntype PropsType = {}\r\n\r\ntype OwnPropsType = {\r\n  dialogsPage: InitialStateType\r\n  sendMessage: (messageText: string) => void\r\n  isAuth: boolean\r\n}\r\nexport type NewMessageFormValuesType = {\r\n  newMessageBody: string\r\n}\r\n\r\ntype NewMessageFormValuesKeysType = keyof NewMessageFormValuesType","import { actions } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\"\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/store';\r\nimport React from 'react';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { ...actions }),\r\n  withAuthRedirect\r\n)(Dialogs)","import React from \"react\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\"\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Сomponent) => {\r\n\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to={\"/login\"} />\r\n      return <Сomponent {...this.props} />\r\n\r\n    }\r\n  }\r\n\r\n  let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n\r\n  return connectedAuthRedirectComponent\r\n}\r\n\r\n// ts 11"],"names":["props","path","id","_jsx","className","styles","children","NavLink","to","name","message","maxLength50","maxLengthCreator","AddMessageFromRedux","reduxForm","form","_jsxs","onSubmit","handleSubmit","CreateField","required","Textarea","dialogElementsJSX","dialogsPage","dialogs","map","item","DialogItem","messagesDataJSX","messages","Message","isAuth","data","sendMessage","newMessageBody","Navigate","compose","connect","state","actions","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","auth","Сomponent","RedirectComponent","React","render","this"],"sourceRoot":""}