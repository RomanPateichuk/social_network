{"version":3,"file":"static/js/21.4194b4f6.chunk.js","mappings":"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","sources":["webpack://social_network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social_network/./src/components/Profile/MyPosts/Post/MyPost.module.css?4339","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://social_network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/withRouter/withRouter.tsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__QtAaA\",\"posts\":\"MyPosts_posts__jNgzV\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPost_item__dJ1K8\"};","import s from './MyPost.module.css'\r\n\r\ntype PropsType = {\r\n  message: string\r\n  likesCount: string\r\n}\r\n\r\n\r\nconst MyPost: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://klike.net/uploads/posts/2021-08/1629443054_1.jpg\" alt=\"post\" />\r\n      {props.message}\r\n      <div>\r\n        <span>like {props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyPost;","import { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { required } from \"../../../../utils/validators/validators\"\r\nimport { CreateField, GetStringKeys, Textarea } from \"../../../common/FormsControls/FormsControls\"\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostFormValuesType = {\r\n  newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n  return <>\r\n    <form onSubmit={props.handleSubmit}>\r\n      {CreateField<AddPostFormValuesTypeKeys>('Your post', 'newPostText', [required], Textarea)}\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  </>\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddPostFormValuesType>({ form: \"postAddForm\" })(AddNewPostForm)\r\n\r\nexport default AddNewPostFormRedux","import s from './MyPosts.module.css'\r\nimport MyPost from './Post/MyPost';\r\nimport React from \"react\"\r\nimport AddNewPostFormRedux, { AddPostFormValuesType } from './AddPostForm/AddPostForm';\r\nimport { PostType } from '../../../types/types';\r\n\r\n\r\nexport type MapPropsType = {\r\n  posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n  addPost: (post: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n  let postsDataJSX = props.posts.map(item => <MyPost key={item.id} message={item.message} likesCount={item.likesCount} />)\r\n\r\n  let onAddPost = (data: AddPostFormValuesType) => {\r\n    props.addPost(data.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      <div className={s.posts}>\r\n        {postsDataJSX}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized","import MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts';\r\nimport { actions } from '../../../redux/profile-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../../redux/store';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, { addPost: actions.addPostActionCreator })(MyPosts)\r\n\r\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__nhWDU\"};","import React, { useState, useEffect, ChangeEvent } from 'react'\r\n\r\ntype PropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfiStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status)\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status]);\r\n\r\n  const activeEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactiveEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateStatus(status)\r\n  }\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!editMode &&\r\n        <div>\r\n          <b>Status: </b><span onDoubleClick={activeEditMode}>{status || \"No status...\"}</span>\r\n        </div>\r\n      }\r\n      {editMode &&\r\n        <div>\r\n          <input onChange={onStatusChange} autoFocus onBlur={deactiveEditMode} value={status} />\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default ProfiStatusWithHooks;","import React from \"react\"\r\nimport { CreateField, GetStringKeys, Input, Textarea } from \"../../common/FormsControls/FormsControls\"\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport s from \"../../common/FormsControls/FormsControls.module.css\"\r\nimport { ProfileType } from \"../../../types/types\"\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ profile, handleSubmit, error }) => {\r\n  return <form onSubmit={handleSubmit} >\r\n    {\r\n      error && <div className={s.form_summary_error} >\r\n        {error}\r\n      </div>\r\n    }\r\n    <div><button>save</button></div>\r\n    <div>\r\n      <b>Full name: </b> {CreateField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n    </div>\r\n    <div>\r\n      <b>About me: </b> {CreateField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job: </b>{CreateField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n    </div>\r\n    <div>\r\n      <b>My professioanal skills: </b> {CreateField<ProfileTypeKeys>(\"My professionak skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n    </div>\r\n    <div>\r\n      <b>Contacts: </b> {\r\n        Object.keys(profile.contacts)\r\n          .map(key => {\r\n            return <div key={key}>\r\n              {/* todo */}\r\n              <b>{key}: {CreateField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n          }\r\n          )\r\n      }\r\n    </div>\r\n  </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({ form: \"edit-profile\" })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, { ChangeEvent, useState } from \"react\"\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport a from './ProfileInfo.module.css'\r\nimport userDefaultPhoto from '../../../assets/images/userPhoto.png'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport ProfileDataForm from \"./ProfileDataForm\"\r\nimport { ContactsType, ProfileType } from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  isOwner: boolean\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => any\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n  let [editMode, setEditMode] = useState(false)\r\n\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    // remove then\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={a.descriptionBlock}>\r\n        <img src={profile.photos.large || userDefaultPhoto} alt=\"\" />\r\n        {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n        {editMode\r\n          ? <ProfileDataForm\r\n            initialValues={\r\n              {\r\n                \"fullName\": profile.fullName,\r\n                \"aboutMe\": profile.aboutMe,\r\n                \"lookingForAJob\": profile.lookingForAJob,\r\n                \"lookingForAJobDescription\": profile.lookingForAJobDescription,\r\n                \"contacts\": {\r\n                  ...profile.contacts\r\n                }\r\n              }}\r\n            onSubmit={onSubmit}\r\n            profile={profile} />\r\n          : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => { setEditMode(true) }} />}\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n  return <div>\r\n    {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n\r\n    <div>\r\n      <b>Full name: </b> {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>About me: </b> {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job: </b>{profile.lookingForAJob ? \"yes\" : \"no\"}\r\n    </div>\r\n    {\r\n      profile.lookingForAJob &&\r\n      <div>\r\n        <b>My professioanal skills: </b> {profile.lookingForAJobDescription}\r\n      </div>\r\n    }\r\n    <div>\r\n      <b>Contacts: </b> {\r\n        Object\r\n          .keys(profile.contacts)\r\n          .map(key => <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n          )\r\n      }\r\n    </div>\r\n  </div>\r\n}\r\n\r\ntype ContactsPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n  return <div><b>{contactTitle}:</b>{contactValue}</div>\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import { ProfileType } from '../../types/types';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: <T>(profile: ProfileType) => Promise<T>\r\n  status: string\r\n  isOwner: boolean\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        isOwner={props.isOwner}\r\n        savePhoto={props.savePhoto}\r\n        saveProfile={props.saveProfile} />\r\n      <MyPostsContainer />\r\n    </div >\r\n  );\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer'\r\nimport { UrlIdParams, withRouter } from '../common/withRouter/withRouter'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getStatus: (userId: number) => void\r\n  updateStatus: (text: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: <T>(profile: ProfileType) => Promise<T>\r\n}\r\n\r\n\r\ntype withRouterPropsType = {\r\n  params: UrlIdParams\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & withRouterPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId\r\n    }\r\n\r\n    this.props.getUserProfile(userId as number)\r\n    this.props.getStatus(userId as number)\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: AppStateType) {\r\n    if (this.props.params.userId !== prevProps.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Profile {...this.props}\r\n      profile={this.props.profile}\r\n      status={this.props.status}\r\n      updateStatus={this.props.updateStatus}\r\n      isOwner={!this.props.params.userId}\r\n      savePhoto={this.props.savePhoto}\r\n      saveProfile={this.props.saveProfile}\r\n    />\r\n\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer)","import React from 'react';\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\r\n\r\nexport type UrlIdParams = {\r\n  userId: string\r\n}\r\n\r\nexport function withRouter(Component: React.ComponentType) {\r\n  function ComponentWithRouterProp(props: any) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams<UrlIdParams>();\r\n    return (\r\n      <Component\r\n        {...props}\r\n        location={location}\r\n        params={params}\r\n        navigate={navigate}\r\n      />\r\n    );\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}","import React from \"react\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\"\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Сomponent) => {\r\n\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to={\"/login\"} />\r\n      return <Сomponent {...this.props} />\r\n\r\n    }\r\n  }\r\n\r\n  let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n\r\n  return connectedAuthRedirectComponent\r\n}\r\n\r\n// ts 11"],"names":["props","_jsxs","className","s","children","_jsx","src","alt","message","likesCount","reduxForm","form","_Fragment","onSubmit","handleSubmit","CreateField","required","Textarea","MyPosts","postsDataJSX","posts","map","item","MyPost","id","AddNewPostFormRedux","data","addPost","newPostText","React","connect","state","profilePage","actions","addPostActionCreator","editMode","setEditMode","useState","status","setStatus","useEffect","onDoubleClick","activeEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deactiveEditMode","updateStatus","_ref","profile","error","form_summary_error","Input","type","Object","keys","contacts","key","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","_ref3","savePhoto","saveProfile","Preloader","a","photos","large","userDefaultPhoto","_e$target$files","target","files","length","ProfileDataForm","initialValues","formData","then","ProfileStatusWithHooks","ProfileInfo","MyPostsContainer","ProfileContainer","refreshProfile","userId","this","params","authorizedUserId","getUserProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","render","Profile","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsForRedirect","Сomponent","RedirectComponent","Navigate","to"],"sourceRoot":""}