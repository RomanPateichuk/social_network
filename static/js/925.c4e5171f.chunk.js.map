{"version":3,"file":"static/js/925.c4e5171f.chunk.js","mappings":"wLAcO,MAAMA,EAAqBA,KACzBC,EAAAA,EAAAA,KAAA,OAAAC,UACLD,EAAAA,EAAAA,KAACE,EAAI,MAIHA,EAAiBA,KACrB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAaC,GAAwBA,EAAMC,KAAKH,SAQ/D,OAPAI,EAAAA,EAAAA,YAAU,KACRN,GAASO,EAAAA,EAAAA,OACF,KACLP,GAASQ,EAAAA,EAAAA,MAAwB,IAElC,KAEIC,EAAAA,EAAAA,MAAA,OAAAX,SAAA,CACO,UAAXI,IAAsBL,EAAAA,EAAAA,KAAA,OAAAC,SAAK,8CAC5BW,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAZ,SAAA,EACED,EAAAA,EAAAA,KAACc,EAAQ,KACTd,EAAAA,EAAAA,KAACe,EAAc,SAGb,EAGFD,EAAqBA,KACzB,MAAME,GAAoBC,EAAAA,EAAAA,QAAuB,MAC3CC,GAAWZ,EAAAA,EAAAA,KAAaC,GAAwBA,EAAMC,KAAKU,YAC1DC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,GAmBjD,OAPAZ,EAAAA,EAAAA,YAAU,KACW,IAADa,EAAdH,IACuB,QAAzBG,EAAAN,EAAkBO,eAAO,IAAAD,GAAzBA,EAA2BE,eAAe,CAACC,SAAU,WACvD,GAEC,CAACP,KAEGN,EAAAA,EAAAA,MAAA,OAAKc,SAjBWC,IACrB,MAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAe,KAC1Ef,GAAgBC,GAAgB,GAGnCD,GAAgBC,GAAgB,EAClC,EAUmCe,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAQpC,SAAA,CAC9EiB,EAASoB,KAAI,CAACC,EAAGC,KAAUxC,EAAAA,EAAAA,KAACyC,EAAO,CAAYC,QAASH,GAAfA,EAAEI,OAC5C3C,EAAAA,EAAAA,KAAA,OAAK4C,IAAK5B,MACN,EAGFyB,EAAqDI,EAAAA,MAAWC,IAAgB,IAAf,QAACJ,GAAQI,EAC9E,OAAOlC,EAAAA,EAAAA,MAAA,OAAAX,SAAA,EACLD,EAAAA,EAAAA,KAAA,OAAKmC,MAAO,CAACY,MAAO,QAASC,IAAKN,EAAQO,MAAOC,IAAI,WAAU,KAAClD,EAAAA,EAAAA,KAAA,KAAAC,SAAIyC,EAAQS,YAC5EnD,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAC,SAAIyC,EAAQA,WAEZ1C,EAAAA,EAAAA,KAAA,WAEI,IAGFe,EAA2BA,KAC/B,MAAO2B,EAASU,IAAc/B,EAAAA,EAAAA,UAAS,IACjClB,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAaC,GAAwBA,EAAMC,KAAKH,SAU/D,OAAOO,EAAAA,EAAAA,MAAA,OAAAX,SAAA,EACLD,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,YAAUqD,SAAW1B,GAAMyB,EAAWzB,EAAEE,cAAcyB,OAAQA,MAAOZ,OAEvE1C,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,UAAQuD,SAAqB,UAAXlD,EAAoBmD,QAbfC,KACpBf,IAGLvC,GAASuD,EAAAA,EAAAA,IAAYhB,IACrBU,EAAW,IAAG,EAQsDnD,SAAC,aAEjE,C","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\n\r\nexport type ChatMessageApiType = {\r\n  message: string,\r\n  photo: string,\r\n  userId: number,\r\n  userName: string\r\n}\r\n\r\n\r\nexport const ChatPage: React.FC = () => {\r\n  return <div>\r\n    <Chat/>\r\n  </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch<any>()\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening())\r\n    return () => {\r\n      dispatch(stopMessagesListening())\r\n    }\r\n  }, []);\r\n\r\n  return <div>\r\n    {status === 'error' && <div>Some error occurred. Please refresh page</div>}\r\n    <>\r\n      <Messages/>\r\n      <AddMessageForm/>\r\n    </>\r\n\r\n  </div>\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n  const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget\r\n    if(Math.abs((element.scrollHeight - element.scrollTop)- element.clientHeight)< 300){\r\n        !isAutoScroll && setIsAutoScroll(true)\r\n    }\r\n    else{\r\n      isAutoScroll && setIsAutoScroll(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n    }\r\n\r\n  }, [messages]);\r\n\r\n  return <div onScroll={scrollHandler} style={{height: '400px', overflowY: 'auto'}}>\r\n    {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n    <div ref={messagesAnchorRef}></div>\r\n  </div>\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageApiType }> = React.memo(({message}) => {\r\n  return <div>\r\n    <img style={{width: '30px'}} src={message.photo} alt='avatar'/> <b>{message.userName}</b>\r\n    <br/>\r\n    <b>{message.message}</b>\r\n\r\n    <hr/>\r\n\r\n  </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n  const [message, setMessage] = useState('')\r\n  const dispatch = useDispatch<any>()\r\n\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return\r\n    }\r\n    dispatch(sendMessage(message))\r\n    setMessage('')\r\n  }\r\n\r\n  return <div>\r\n    <div>\r\n      <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n    </div>\r\n    <div>\r\n      <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n    </div>\r\n  </div>\r\n}"],"names":["ChatPage","_jsx","children","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","_jsxs","_Fragment","Messages","AddMessageForm","messagesAnchorRef","useRef","messages","isAutoScroll","setIsAutoScroll","useState","_messagesAnchorRef$cu","current","scrollIntoView","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","style","height","overflowY","map","m","index","Message","message","id","ref","React","_ref","width","src","photo","alt","userName","setMessage","onChange","value","disabled","onClick","sendMessageHandler","sendMessage"],"sourceRoot":""}